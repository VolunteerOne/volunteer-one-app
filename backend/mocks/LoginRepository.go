// Code generated by mockery v2.26.0. DO NOT EDIT.

package mocks

import (
	models "github.com/VolunteerOne/volunteer-one-app/backend/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// LoginRepository is an autogenerated mock type for the LoginRepository type
type LoginRepository struct {
	mock.Mock
}

// ChangePassword provides a mock function with given fields: _a0, _a1
func (_m *LoginRepository) ChangePassword(_a0 []byte, _a1 models.Users) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, models.Users) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRefreshToken provides a mock function with given fields: _a0
func (_m *LoginRepository) DeleteRefreshToken(_a0 models.Delegations) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Delegations) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindRefreshToken provides a mock function with given fields: _a0, _a1
func (_m *LoginRepository) FindRefreshToken(_a0 float64, _a1 models.Delegations) (models.Delegations, error) {
	ret := _m.Called(_a0, _a1)

	var r0 models.Delegations
	var r1 error
	if rf, ok := ret.Get(0).(func(float64, models.Delegations) (models.Delegations, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(float64, models.Delegations) models.Delegations); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(models.Delegations)
	}

	if rf, ok := ret.Get(1).(func(float64, models.Delegations) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindTokenFromID provides a mock function with given fields: _a0, _a1
func (_m *LoginRepository) FindTokenFromID(_a0 uint, _a1 models.Delegations) (models.Delegations, error) {
	ret := _m.Called(_a0, _a1)

	var r0 models.Delegations
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, models.Delegations) (models.Delegations, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(uint, models.Delegations) models.Delegations); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(models.Delegations)
	}

	if rf, ok := ret.Get(1).(func(uint, models.Delegations) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserFromEmail provides a mock function with given fields: _a0, _a1
func (_m *LoginRepository) FindUserFromEmail(_a0 string, _a1 models.Users) (models.Users, error) {
	ret := _m.Called(_a0, _a1)

	var r0 models.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(string, models.Users) (models.Users, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, models.Users) models.Users); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(models.Users)
	}

	if rf, ok := ret.Get(1).(func(string, models.Users) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveRefreshToken provides a mock function with given fields: _a0, _a1, _a2
func (_m *LoginRepository) SaveRefreshToken(_a0 uint, _a1 string, _a2 models.Delegations) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, string, models.Delegations) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveResetCodeToUser provides a mock function with given fields: _a0, _a1
func (_m *LoginRepository) SaveResetCodeToUser(_a0 uuid.UUID, _a1 models.Users) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, models.Users) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewLoginRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewLoginRepository creates a new instance of LoginRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLoginRepository(t mockConstructorTestingTNewLoginRepository) *LoginRepository {
	mock := &LoginRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
