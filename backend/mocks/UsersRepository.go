// Code generated by mockery v2.26.0. DO NOT EDIT.

package mocks

import (
	models "github.com/VolunteerOne/volunteer-one-app/backend/models"
	mock "github.com/stretchr/testify/mock"
)

// UsersRepository is an autogenerated mock type for the UsersRepository type
type UsersRepository struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: user
func (_m *UsersRepository) CreateUser(user models.Users) (models.Users, error) {
	ret := _m.Called(user)

	var r0 models.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Users) (models.Users, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(models.Users) models.Users); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(models.Users)
	}

	if rf, ok := ret.Get(1).(func(models.Users) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: user
func (_m *UsersRepository) DeleteUser(user models.Users) (models.Users, error) {
	ret := _m.Called(user)

	var r0 models.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Users) (models.Users, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(models.Users) models.Users); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(models.Users)
	}

	if rf, ok := ret.Get(1).(func(models.Users) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OneUser provides a mock function with given fields: id, user
func (_m *UsersRepository) OneUser(id string, user models.Users) (models.Users, error) {
	ret := _m.Called(id, user)

	var r0 models.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(string, models.Users) (models.Users, error)); ok {
		return rf(id, user)
	}
	if rf, ok := ret.Get(0).(func(string, models.Users) models.Users); ok {
		r0 = rf(id, user)
	} else {
		r0 = ret.Get(0).(models.Users)
	}

	if rf, ok := ret.Get(1).(func(string, models.Users) error); ok {
		r1 = rf(id, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: user
func (_m *UsersRepository) UpdateUser(user models.Users) (models.Users, error) {
	ret := _m.Called(user)

	var r0 models.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Users) (models.Users, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(models.Users) models.Users); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(models.Users)
	}

	if rf, ok := ret.Get(1).(func(models.Users) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUsersRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewUsersRepository creates a new instance of UsersRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUsersRepository(t mockConstructorTestingTNewUsersRepository) *UsersRepository {
	mock := &UsersRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
