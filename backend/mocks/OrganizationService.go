// Code generated by mockery v2.26.0. DO NOT EDIT.

package mocks

import (
	models "github.com/VolunteerOne/volunteer-one-app/backend/models"
	mock "github.com/stretchr/testify/mock"
)

// OrganizationService is an autogenerated mock type for the OrganizationService type
type OrganizationService struct {
	mock.Mock
}

// CreateOrganization provides a mock function with given fields: _a0
func (_m *OrganizationService) CreateOrganization(_a0 models.Organization) (models.Organization, error) {
	ret := _m.Called(_a0)

	var r0 models.Organization
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Organization) (models.Organization, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(models.Organization) models.Organization); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(models.Organization)
	}

	if rf, ok := ret.Get(1).(func(models.Organization) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOrganization provides a mock function with given fields: _a0
func (_m *OrganizationService) DeleteOrganization(_a0 models.Organization) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Organization) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOrganizationById provides a mock function with given fields: _a0
func (_m *OrganizationService) GetOrganizationById(_a0 string) (models.Organization, error) {
	ret := _m.Called(_a0)

	var r0 models.Organization
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.Organization, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) models.Organization); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(models.Organization)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrganizations provides a mock function with given fields:
func (_m *OrganizationService) GetOrganizations() ([]models.Organization, error) {
	ret := _m.Called()

	var r0 []models.Organization
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Organization, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Organization); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Organization)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrganization provides a mock function with given fields: _a0
func (_m *OrganizationService) UpdateOrganization(_a0 models.Organization) (models.Organization, error) {
	ret := _m.Called(_a0)

	var r0 models.Organization
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Organization) (models.Organization, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(models.Organization) models.Organization); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(models.Organization)
	}

	if rf, ok := ret.Get(1).(func(models.Organization) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewOrganizationService interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrganizationService creates a new instance of OrganizationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrganizationService(t mockConstructorTestingTNewOrganizationService) *OrganizationService {
	mock := &OrganizationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
