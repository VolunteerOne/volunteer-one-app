// Code generated by mockery v2.26.0. DO NOT EDIT.

package mocks

import (
	models "github.com/VolunteerOne/volunteer-one-app/backend/models"
	mock "github.com/stretchr/testify/mock"
)

// OrgUsersService is an autogenerated mock type for the OrgUsersService type
type OrgUsersService struct {
	mock.Mock
}

// CreateOrgUser provides a mock function with given fields: _a0
func (_m *OrgUsersService) CreateOrgUser(_a0 models.OrgUsers) (models.OrgUsers, error) {
	ret := _m.Called(_a0)

	var r0 models.OrgUsers
	var r1 error
	if rf, ok := ret.Get(0).(func(models.OrgUsers) (models.OrgUsers, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(models.OrgUsers) models.OrgUsers); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(models.OrgUsers)
	}

	if rf, ok := ret.Get(1).(func(models.OrgUsers) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOrgUser provides a mock function with given fields: _a0, _a1
func (_m *OrgUsersService) DeleteOrgUser(_a0 uint, _a1 uint) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindOrgUser provides a mock function with given fields: _a0, _a1
func (_m *OrgUsersService) FindOrgUser(_a0 uint, _a1 uint) (models.OrgUsers, error) {
	ret := _m.Called(_a0, _a1)

	var r0 models.OrgUsers
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint) (models.OrgUsers, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) models.OrgUsers); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(models.OrgUsers)
	}

	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAllOrgUsers provides a mock function with given fields:
func (_m *OrgUsersService) ListAllOrgUsers() ([]models.OrgUsers, error) {
	ret := _m.Called()

	var r0 []models.OrgUsers
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.OrgUsers, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.OrgUsers); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.OrgUsers)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrgUser provides a mock function with given fields: _a0, _a1, _a2
func (_m *OrgUsersService) UpdateOrgUser(_a0 uint, _a1 uint, _a2 uint) (models.OrgUsers, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 models.OrgUsers
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint, uint) (models.OrgUsers, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(uint, uint, uint) models.OrgUsers); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(models.OrgUsers)
	}

	if rf, ok := ret.Get(1).(func(uint, uint, uint) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewOrgUsersService interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrgUsersService creates a new instance of OrgUsersService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrgUsersService(t mockConstructorTestingTNewOrgUsersService) *OrgUsersService {
	mock := &OrgUsersService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
